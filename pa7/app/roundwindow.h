#ifndef ROUNDWINDOW_H
#define ROUNDWINDOW_H

#include <QMainWindow>
#include <QKeyEvent>
#include <QCloseEvent>
#include <QMessageBox>
#include <QGridLayout>

#include "keyboard.h"
#include "wordleround.h"

QT_BEGIN_NAMESPACE
namespace Ui { class RoundWindow; }
QT_END_NAMESPACE

/**
 * @brief Base class for handling UI for a Wordle round.
 *
 * Contains pointers to the UI generated by roundwindow.h,
 * a Keyboard object and a WordleRound object.
 * Note: WordleRound is also a base class; the concrete derived object
 * must be created by the corresponding derived class of RoundWindow
 * (example: RegularRoundWindow will set wr to point to a RegularWordleRound object).
 */
class RoundWindow : public QMainWindow
{
    Q_OBJECT

    // For testing purposes, these classes can access UI
    friend class TestTask2;
    friend class TestTask3;
    friend class TestTask4;
    friend class TestTask5;
    friend class TestBonusTask1;
    friend class TestBonusTask2;
    friend class TestBonusTask3;

protected:
    QString title {"Wordle"};

    Ui::RoundWindow *ui;
    Keyboard *kb;
    WordleRound *wr {nullptr};

public:
    RoundWindow(QWidget *parent = nullptr);
    virtual ~RoundWindow();

    /**
     * @brief Add a 2D array of LetterBox* to a QGridLayout
     * @param grid: pointer to QGridLayout to be updated
     * @param boxes: 2D array of LetterBox*
     * @param rows: number of rows (= number of guesses)
     * @param columns: number of columns (= number of letters in word)
     */
    void generateLetterBoxes(QGridLayout *grid, LetterBox*** boxes, int rows, int columns);

    /**
     * @brief Overrides default keyPressEvent() for custom key press handling
     * @param event
     */
    void keyPressEvent(QKeyEvent *event) override;

    /**
     * @brief Overrides default closeEvent() for custom window closing dialogue
     * @param event
     */
    void closeEvent (QCloseEvent *event) override;

public slots:
    /**
     * @brief Generates popup when user enters a word not in dictionary
     */
    virtual void popupInvalidWord();

    /**
     * @brief Generates popup when user does not use correct letters in hard mode
     */
    virtual void popupInvalidHardWord();

    /**
     * @brief Generates popup when user wins the round.
     * Disables options other than Reset Round and updates the title
     */
    virtual void popupRoundWin();

    /**
     * @brief Generates popup when user loses the round.
     * Disables options other than Reset Round and updates the title
     */
    virtual void popupRoundLose();

    /**
     * @brief Generates popup when user chooses "Give Up", asks for confirmation.
     * If Yes is chosen, treat the game as a loss
     */
    virtual void popupConfirmGiveUp();

    /**
     * @brief Generates popup when user chooses "Reset Round", asks for confirmation.
     * Re-enables options other than Reset Round and updates the title
     */
    virtual void popupConfirmReset();

    /**
     * @brief Generates popup when user chooses "Cheat"
     */
    virtual void popupCheat();

    /**
     * @brief Generates popup when user chooses "Hint"
     */
    virtual void popupHint();

signals:
    void closeRound();
};
#endif // ROUNDWINDOW_H
